// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const CONFIG = {
  MAX_PLAYERS: 8,
  DEFAULT_MONEY: 10000,
  BID_TIMER: 30,
  ITEMS: {
    COMMON: [
      { name: "–ó–æ–ª–æ—Ç–æ", value: 500, emoji: "üí∞", chance: 0.6 },
      { name: "–°–µ—Ä–µ–±—Ä–æ", value: 300, emoji: "üíé", chance: 0.3 }
    ],
    RARE: [
      { name: "–ê–ª–º–∞–∑", value: 1500, emoji: "üî∂", chance: 0.08 },
      { name: "–ö—Ä–∏—Å—Ç–∞–ª–ª", value: 1000, emoji: "üî∑", chance: 0.02 }
    ]
  }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
  player: {
    id: generateId(),
    name: "",
    money: CONFIG.DEFAULT_MONEY,
    isHost: false
  },
  currentLobby: null,
  lobbies: [],
  sounds: {
    hover: new Audio('sounds/hover.mp3'),
    click: new Audio('sounds/click.mp3'),
    notification: new Audio('sounds/notification.mp3')
  }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
  startScreen: document.getElementById('start-screen'),
  nicknameInput: document.getElementById('nickname'),
  createLobbyBtn: document.getElementById('create-lobby'),
  joinLobbyBtn: document.getElementById('join-lobby'),
  refreshLobbiesBtn: document.getElementById('refresh-lobbies'),
  lobbyList: document.getElementById('lobby-list'),
  notification: document.getElementById('notification')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤
  Object.values(gameState.sounds).forEach(sound => {
    sound.volume = 0.3;
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  setupEventListeners();
  loadLobbies();
  
  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
  elements.nicknameInput.focus();
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  gsap.from(".logo", { 
    duration: 1, 
    y: -50, 
    opacity: 0, 
    ease: "back.out(1.7)" 
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ö–Ω–æ–ø–∫–∏
  elements.createLobbyBtn.addEventListener('click', createLobby);
  elements.joinLobbyBtn.addEventListener('click', showLobbies);
  elements.refreshLobbiesBtn.addEventListener('click', loadLobbies);
  
  // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
  const interactiveElements = document.querySelectorAll('button, .lobby-item');
  interactiveElements.forEach(el => {
    el.addEventListener('mouseenter', () => {
      gameState.sounds.hover.currentTime = 0;
      gameState.sounds.hover.play();
      gsap.to(el, { scale: 1.05, duration: 0.2 });
    });
    
    el.addEventListener('mouseleave', () => {
      gsap.to(el, { scale: 1, duration: 0.2 });
    });
  });
  
  // –í–≤–æ–¥ –Ω–∏–∫–∞
  elements.nicknameInput.addEventListener('input', validateNickname);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–∞
function validateNickname() {
  const nickname = elements.nicknameInput.value.trim();
  if (nickname.length >= 2) {
    gameState.player.name = nickname;
    elements.createLobbyBtn.disabled = false;
    elements.joinLobbyBtn.disabled = false;
  } else {
    elements.createLobbyBtn.disabled = true;
    elements.joinLobbyBtn.disabled = true;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏
async function loadLobbies() {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
    const mockLobbies = [
      {
        id: "ABC123",
        host: "ProGamer",
        players: [
          { id: "p1", name: "ProGamer", money: CONFIG.DEFAULT_MONEY, isHost: true },
          { id: "p2", name: "Player2", money: CONFIG.DEFAULT_MONEY },
          { id: "p3", name: "Player3", money: CONFIG.DEFAULT_MONEY }
        ],
        settings: {
          containers: 10,
          timer: 20,
          mode: "solo"
        },
        status: "waiting"
      },
      {
        id: "XYZ789",
        host: "AuctionKing",
        players: [
          { id: "p4", name: "AuctionKing", money: CONFIG.DEFAULT_MONEY, isHost: true }
        ],
        settings: {
          containers: 5,
          timer: 15,
          mode: "teams"
        },
        status: "waiting"
      }
    ];
    
    gameState.lobbies = mockLobbies;
    renderLobbies();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    gsap.from(".lobby-item", {
      duration: 0.5,
      y: 20,
      opacity: 0,
      stagger: 0.1
    });
    
    showNotification("–õ–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏:", error);
    showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏", "error");
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏
function renderLobbies() {
  elements.lobbyList.innerHTML = '';
  
  gameState.lobbies.forEach(lobby => {
    const lobbyItem = document.createElement('div');
    lobbyItem.className = 'lobby-item';
    
    lobbyItem.innerHTML = `
      <div class="lobby-info">
        <span class="lobby-id">#${lobby.id}</span>
        <span class="lobby-host">–í–µ–¥—É—â–∏–π: ${lobby.host}</span>
      </div>
      <div class="lobby-stats">
        <span class="players-count">üë• ${lobby.players.length}/${CONFIG.MAX_PLAYERS}</span>
        <span class="lobby-status ${lobby.status}">
          ${getStatusText(lobby.status)}
        </span>
      </div>
      <button class="btn-join">–í–û–ô–¢–ò</button>
    `;
    
    lobbyItem.querySelector('.btn-join').addEventListener('click', () => {
      joinLobby(lobby.id);
    });
    
    elements.lobbyList.appendChild(lobbyItem);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏
function createLobby() {
  if (!gameState.player.name) {
    showNotification("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º!", "error");
    return;
  }
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
  const newLobby = {
    id: generateLobbyId(),
    host: gameState.player.name,
    players: [{
      ...gameState.player,
      isHost: true
    }],
    settings: {
      containers: 10,
      timer: 20,
      mode: "solo"
    },
    status: "waiting"
  };
  
  gameState.currentLobby = newLobby;
  gameState.player.isHost = true;
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–±–±–∏
  showNotification(`–õ–æ–±–±–∏ #${newLobby.id} —Å–æ–∑–¥–∞–Ω–æ!`);
  setTimeout(() => {
    window.location.href = `lobby.html?id=${newLobby.id}`;
  }, 1000);
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
function joinLobby(lobbyId) {
  if (!gameState.player.name) {
    showNotification("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º!", "error");
    return;
  }
  
  const lobby = gameState.lobbies.find(l => l.id === lobbyId);
  if (!lobby) {
    showNotification("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", "error");
    return;
  }
  
  if (lobby.players.length >= CONFIG.MAX_PLAYERS) {
    showNotification("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!", "error");
    return;
  }
  
  gameState.currentLobby = lobby;
  gameState.player.isHost = false;
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
  lobby.players.push({
    ...gameState.player
  });
  
  showNotification(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ #${lobbyId}...`);
  setTimeout(() => {
    window.location.href = `lobby.html?id=${lobbyId}`;
  }, 1000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = "success") {
  const notification = elements.notification;
  notification.textContent = message;
  notification.className = `notification show ${type}`;
  
  gameState.sounds.notification.currentTime = 0;
  gameState.sounds.notification.play();
  
  gsap.fromTo(notification, 
    { y: 50, opacity: 0 },
    { y: 0, opacity: 1, duration: 0.3 }
  );
  
  setTimeout(() => {
    gsap.to(notification, {
      y: 50,
      opacity: 0,
      duration: 0.3,
      onComplete: () => {
        notification.classList.remove('show');
      }
    });
  }, 3000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateId() {
  return Math.random().toString(36).substr(2, 8);
}

function generateLobbyId() {
  return Math.random().toString(36).substr(2, 6).toUpperCase();
}

function getStatusText(status) {
  const statuses = {
    waiting: "–û–∂–∏–¥–∞–Ω–∏–µ...",
    starting: "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è...",
    in_progress: "–ò–¥–µ—Ç –∏–≥—Ä–∞",
    finished: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
  };
  return statuses[status] || status;
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initGame);
